import{H as k,I as p,J as a,K as b}from"./scheduler.XZPkp4Hr.js";import{g as i,a as v,e as g,t as w}from"./index.BLcQLEXD.js";function q(t,e){const l=e.token={};function r(c,s,h,m){if(e.token!==l)return;e.resolved=m;let n=e.ctx;h!==void 0&&(n=n.slice(),n[h]=m);const u=c&&(e.current=c)(n);let d=!1;e.block&&(e.blocks?e.blocks.forEach((o,_)=>{_!==s&&o&&(i(),v(o,1,1,()=>{e.blocks[_]===o&&(e.blocks[_]=null)}),g())}):e.block.d(1),u.c(),w(u,1),u.m(e.mount(),e.anchor),d=!0),e.block=u,e.blocks&&(e.blocks[s]=u),d&&b()}if(k(t)){const c=p();if(t.then(s=>{a(c),r(e.then,1,e.value,s),a(null)},s=>{if(a(c),r(e.catch,2,e.error,s),a(null),!e.hasCatch)throw s}),e.current!==e.pending)return r(e.pending,0),!0}else{if(e.current!==e.then)return r(e.then,1,e.value,t),!0;e.resolved=t}}function E(t,e,l){const r=e.slice(),{resolved:c}=t;t.current===t.then&&(r[t.value]=c),t.current===t.catch&&(r[t.error]=c),t.block.p(r,l)}const H=(t,e,l)=>{const r=t[e];return r?typeof r=="function"?r():Promise.resolve(r):new Promise((c,s)=>{(typeof queueMicrotask=="function"?queueMicrotask:setTimeout)(s.bind(null,new Error("Unknown variable dynamic import: "+e+(e.split("/").length!==l?". Note that variables only represent file names one level deep.":""))))})};export{H as _,q as h,E as u};
